# Makefile para API REST Rust
# Comandos para desenvolvimento e gerenciamento do projeto

.PHONY: help install build run test clean docker-up docker-down docker-logs migrate check format lint

# Vari√°veis
CARGO := cargo
DOCKER_COMPOSE := docker compose

# Ajuda - mostra todos os comandos dispon√≠veis
help:
	@echo "ü¶Ä API REST Rust - Comandos Dispon√≠veis"
	@echo "======================================"
	@echo ""
	@echo "üì¶ Desenvolvimento:"
	@echo "  install     - Instala depend√™ncias do projeto"
	@echo "  build       - Compila o projeto"
	@echo "  run         - Executa o servidor"
	@echo "  check       - Verifica o c√≥digo sem compilar"
	@echo "  test        - Executa testes"
	@echo "  format      - Formata o c√≥digo"
	@echo "  lint        - Executa clippy (linter)"
	@echo ""
	@echo "üê≥ Docker:"
	@echo "  docker-up   - Inicia PostgreSQL e PgAdmin"
	@echo "  docker-down - Para e remove containers"
	@echo "  docker-logs - Mostra logs dos containers"
	@echo ""
	@echo "üóÑÔ∏è  Database:"
	@echo "  migrate     - Executa migra√ß√µes do banco"
	@echo ""
	@echo "üßπ Limpeza:"
	@echo "  clean       - Remove arquivos de build"
	@echo ""
	@echo "üß™ Teste da API:"
	@echo "  api-test    - Executa testes da API (requer servidor rodando)"
	@echo "  api-diagnose - Executa diagn√≥stico autom√°tico da API"
	@echo "  rate-limit-test - Testa funcionalidade de rate limiting"
	@echo ""
	@echo "üì° Endpoints dispon√≠veis:"
	@echo ""
	@echo "üîì P√∫blicos (sem autentica√ß√£o):"
	@echo "  GET    /health                     - Health check"
	@echo "  POST   /api/v1/auth/login          - Login (retorna JWT)"
	@echo "  POST   /api/v1/users               - Criar usu√°rio"
	@echo ""
	@echo "üîë Protegidos (requer JWT Bearer token):"
	@echo "  GET    /api/v1/users/me            - Dados do usu√°rio logado"
	@echo "  GET    /api/v1/users/{id}          - Buscar usu√°rio por ID"
	@echo "  PUT    /api/v1/users/{id}          - Atualizar usu√°rio"
	@echo "  PATCH  /api/v1/users/{id}/change-password - Alterar senha"
	@echo ""
	@echo "üëë Admin (requer JWT de administrador):"
	@echo "  GET    /api/v1/users               - Listar usu√°rios (com pagina√ß√£o)"
	@echo "  DELETE /api/v1/users/{id}          - Deletar usu√°rio"
	@echo ""
	@echo "üîê Como usar:"
	@echo "  1. Login: POST /api/v1/auth/login"
	@echo "  2. Usar token: Authorization: Bearer {token}"
	@echo "  3. Admin padr√£o: admin@sistema.com / admin123"

# Instala depend√™ncias
install:
	@echo "üì¶ Instalando depend√™ncias..."
	$(CARGO) fetch

# Compila o projeto
build:
	@echo "üî® Compilando projeto..."
	$(CARGO) build

# Compila em modo release
build-release:
	@echo "üî® Compilando em modo release..."
	$(CARGO) build --release

# Executa o servidor
run:
	@echo "üöÄ Iniciando servidor..."
	$(CARGO) run

# Verifica o c√≥digo
check:
	@echo "üîç Verificando c√≥digo..."
	$(CARGO) check

# Executa testes
test:
	@echo "üß™ Executando testes..."
	$(CARGO) test

# Formata o c√≥digo
format:
	@echo "üìù Formatando c√≥digo..."
	$(CARGO) fmt

# Executa clippy (linter)
lint:
	@echo "üîé Executando clippy..."
	$(CARGO) clippy -- -D warnings

# Inicia containers Docker
docker-up:
	@echo "üê≥ Iniciando PostgreSQL e PgAdmin..."
	$(DOCKER_COMPOSE) up -d
	@echo "‚úÖ PostgreSQL: http://localhost:5432"
	@echo "‚úÖ PgAdmin: http://localhost:8081"
	@echo "   Email: admin@example.com"
	@echo "   Senha: admin123"

# Para containers Docker
docker-down:
	@echo "üõë Parando containers..."
	$(DOCKER_COMPOSE) down

# Mostra logs dos containers
docker-logs:
	@echo "üìã Logs dos containers:"
	$(DOCKER_COMPOSE) logs -f

# Executa migra√ß√µes (requer sqlx-cli)
migrate:
	@echo "üóÑÔ∏è  Executando migra√ß√µes..."
	@if ! command -v sqlx >/dev/null 2>&1; then \
		echo "‚ùå sqlx-cli n√£o encontrado. Instalando..."; \
		$(CARGO) install sqlx-cli --no-default-features --features rustls,postgres; \
	fi
	sqlx migrate run

# Limpa arquivos de build
clean:
	@echo "üßπ Limpando arquivos de build..."
	$(CARGO) clean

# Executa todos os checks de qualidade
quality: format lint check test
	@echo "‚úÖ Todos os checks de qualidade executados!"

# Setup completo do projeto
setup: install docker-up
	@echo "‚è≥ Aguardando PostgreSQL inicializar..."
	@sleep 10
	@make migrate
	@echo "üéâ Setup completo! Execute 'make run' para iniciar o servidor"

# Executa testes da API
api-test:
	@echo "üß™ Executando testes da API..."
	@if ! curl -s http://localhost:8080/health >/dev/null; then \
		echo "‚ùå Servidor n√£o est√° rodando. Execute 'make run' primeiro"; \
		exit 1; \
	fi
	@./test_api.sh

# Executa diagn√≥stico da API
api-diagnose:
	@echo "üîç Executando diagn√≥stico da API..."
	@./test_api.sh --diagnose

# Executa testes de rate limiting
rate-limit-test:
	@echo "üö¶ Testando rate limiting..."
	@if ! curl -s http://localhost:8080/health >/dev/null; then \
		echo "‚ùå Servidor n√£o est√° rodando. Execute 'make run' primeiro"; \
		exit 1; \
	fi
	@./test_rate_limit.sh

# Monitora arquivos e reinicia automaticamente (requer cargo-watch)
watch:
	@echo "üëÅÔ∏è  Monitorando arquivos para reinicializa√ß√£o autom√°tica..."
	@if ! command -v cargo-watch >/dev/null 2>&1; then \
		echo "üì¶ Instalando cargo-watch..."; \
		$(CARGO) install cargo-watch; \
	fi
	cargo-watch -x run

# Gera documenta√ß√£o
docs:
	@echo "üìö Gerando documenta√ß√£o..."
	$(CARGO) doc --open

# Comando de desenvolvimento completo
dev: format lint check build run

# Backup do banco de dados
db-backup:
	@echo "üíæ Fazendo backup do banco..."
	@docker exec rust-api-postgres pg_dump -U rust_user rust_api_db > backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "‚úÖ Backup salvo como backup_$(shell date +%Y%m%d_%H%M%S).sql"

# Informa√ß√µes do projeto
info:
	@echo "üìã Informa√ß√µes do Projeto"
	@echo "========================"
	@echo "Nome: API REST Rust"
	@echo "Vers√£o: $(shell grep '^version' Cargo.toml | cut -d'"' -f2)"
	@echo "Rust: $(shell rustc --version)"
	@echo "Cargo: $(shell cargo --version)"
	@echo ""
	@echo "üîó URLs:"
	@echo "  API: http://localhost:8080"
	@echo "  Health: http://localhost:8080/health"
	@echo "  PgAdmin: http://localhost:8081"
	@echo ""
	@echo "üìÅ Estrutura:"
	@echo "  src/          - C√≥digo fonte"
	@echo "  migrations/   - Migra√ß√µes do banco"
	@echo "  target/       - Arquivos compilados"
